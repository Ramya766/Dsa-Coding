
BRUTE APPROACH
class Main{
    public static void main(String[] args){
        int []  arr={1,2,3,4,5};
        int n=5;
        int d=2;
        int temp[]=new int[d];
        for(int i=0;i<d;i++){
            temp[i]=arr[i];
        }
        for(int i=d;i<n;i++){
            arr[i-d]=arr[i];
        }
        int j=0;
        for(int i=n-d;i<n;i++){
            arr[i]=temp[j];
            j++;
        }
        for(int i=0;i<arr.length;i++){
            System.out.print(arr[i]);
        }
    }
}
TC: O(n+d)
SC:O(d)

Optimal:
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
class Main{
    public static void main(String[] args){
        int []  arr={1,2,3,4,5,6,7};
        int n=7;
        int d=3;
        List <Integer> rev=new ArrayList<>();
        for(int i=0;i<arr.length;i++){
            rev.add(arr[i]);
        }
            Collections.reverse(rev.subList(0,d));
  
            Collections.reverse(rev.subList(d,n));

            Collections.reverse(rev);
       
    
        System.out.print(rev);
        
        
        
    }
}

Optimal diff approach using revrse function writing reverse function code on own:

import java.util.Arrays;
class Main{
    public static void Reverse(int[] arr,int start,int end){
    while(start<end){
        int temp=arr[start];
        arr[start]=arr[end];
        arr[end]=temp;
        start++;
        end--;
    }
}
    public static void main(String[] args){
       int [] arr={1,23,4,5,6,7};
       int d=3;
       int n=arr.length;
       Reverse(arr,0,d-1);
       Reverse(arr,d,n-1);
       Reverse(arr,0,n-1);
       System.out.print(Arrays.toString(arr));
       
        
        
    }
}


